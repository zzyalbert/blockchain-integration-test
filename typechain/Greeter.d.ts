/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GreeterInterface extends ethers.utils.Interface {
  functions: {
    "greeterSubAddresses(uint256)": FunctionFragment;
    "message()": FunctionFragment;
    "setMessage(string)": FunctionFragment;
    "testCall(address,uint256)": FunctionFragment;
    "testCreateSubContract(string)": FunctionFragment;
    "testDelegateCall(address,uint256)": FunctionFragment;
    "testERC1155TransferBatch(address,uint256)": FunctionFragment;
    "testERC1155TransferSingle(address,uint256)": FunctionFragment;
    "testERC20Transfer(address,uint256)": FunctionFragment;
    "testERC20TransferFrom(address,uint256)": FunctionFragment;
    "testERC777Sent(address,uint256)": FunctionFragment;
    "testStaticCall(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "greeterSubAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "message", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMessage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "testCall",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testCreateSubContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testDelegateCall",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testERC1155TransferBatch",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testERC1155TransferSingle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testERC20Transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testERC20TransferFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testERC777Sent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testStaticCall",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "greeterSubAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testCreateSubContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDelegateCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testERC1155TransferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testERC1155TransferSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testERC20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testERC20TransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testERC777Sent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testStaticCall",
    data: BytesLike
  ): Result;

  events: {
    "Sent(address,address,address,uint256,bytes,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
}

export type SentEvent = TypedEvent<
  [string, string, string, BigNumber, string, string] & {
    operator: string;
    from: string;
    to: string;
    amount: BigNumber;
    data: string;
    operatorData: string;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokens: BigNumber }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export class Greeter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GreeterInterface;

  functions: {
    greeterSubAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    message(overrides?: CallOverrides): Promise<[string]>;

    setMessage(
      _message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testCreateSubContract(
      _subName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testDelegateCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testERC1155TransferBatch(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testERC1155TransferSingle(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testERC20Transfer(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testERC20TransferFrom(
      from: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testERC777Sent(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testStaticCall(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  greeterSubAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  message(overrides?: CallOverrides): Promise<string>;

  setMessage(
    _message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testCall(
    receiver: string,
    _age: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testCreateSubContract(
    _subName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testDelegateCall(
    receiver: string,
    _age: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testERC1155TransferBatch(
    receiver: string,
    numTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testERC1155TransferSingle(
    receiver: string,
    numTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testERC20Transfer(
    receiver: string,
    numTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testERC20TransferFrom(
    from: string,
    numTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testERC777Sent(
    receiver: string,
    numTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testStaticCall(receiver: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    greeterSubAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    message(overrides?: CallOverrides): Promise<string>;

    setMessage(_message: string, overrides?: CallOverrides): Promise<void>;

    testCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testCreateSubContract(
      _subName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testDelegateCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testERC1155TransferBatch(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testERC1155TransferSingle(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testERC20Transfer(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testERC20TransferFrom(
      from: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testERC777Sent(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testStaticCall(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Sent(address,address,address,uint256,bytes,bytes)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string],
      {
        operator: string;
        from: string;
        to: string;
        amount: BigNumber;
        data: string;
        operatorData: string;
      }
    >;

    Sent(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string],
      {
        operator: string;
        from: string;
        to: string;
        amount: BigNumber;
        data: string;
        operatorData: string;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokens?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokens: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokens?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokens: BigNumber }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;
  };

  estimateGas: {
    greeterSubAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    message(overrides?: CallOverrides): Promise<BigNumber>;

    setMessage(
      _message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testCreateSubContract(
      _subName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testDelegateCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testERC1155TransferBatch(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testERC1155TransferSingle(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testERC20Transfer(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testERC20TransferFrom(
      from: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testERC777Sent(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testStaticCall(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    greeterSubAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    message(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMessage(
      _message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testCreateSubContract(
      _subName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testDelegateCall(
      receiver: string,
      _age: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testERC1155TransferBatch(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testERC1155TransferSingle(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testERC20Transfer(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testERC20TransferFrom(
      from: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testERC777Sent(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testStaticCall(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
