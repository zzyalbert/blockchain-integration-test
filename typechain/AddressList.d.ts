/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AddressListInterface extends ethers.utils.Interface {
  functions: {
    "addBlacklist(address,uint8)": FunctionFragment;
    "addDeveloper(address)": FunctionFragment;
    "addOrUpdateRule(bytes32,uint128,uint8)": FunctionFragment;
    "admin()": FunctionFragment;
    "blackLastUpdatedNumber()": FunctionFragment;
    "checkInnerCreation()": FunctionFragment;
    "commitChangeAdmin(address)": FunctionFragment;
    "confirmChangeAdmin()": FunctionFragment;
    "devVerifyEnabled()": FunctionFragment;
    "disableCheckInnerCreation()": FunctionFragment;
    "disableDevVerify()": FunctionFragment;
    "enableCheckInnerCreation()": FunctionFragment;
    "enableDevVerify()": FunctionFragment;
    "getBlacksFrom()": FunctionFragment;
    "getBlacksTo()": FunctionFragment;
    "getRuleByIndex(uint32)": FunctionFragment;
    "getRuleByKey(bytes32,uint128)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isBlackAddress(address)": FunctionFragment;
    "isDeveloper(address)": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "removeBlacklist(address,uint8)": FunctionFragment;
    "removeDeveloper(address)": FunctionFragment;
    "removeRule(bytes32,uint128)": FunctionFragment;
    "rulesLastUpdatedNumber()": FunctionFragment;
    "rulesLen()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBlacklist",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDeveloper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrUpdateRule",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blackLastUpdatedNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkInnerCreation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitChangeAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmChangeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devVerifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableCheckInnerCreation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableDevVerify",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCheckInnerCreation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableDevVerify",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlacksFrom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlacksTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRuleByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRuleByKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlackAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isDeveloper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlacklist",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeveloper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRule",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rulesLastUpdatedNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rulesLen", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrUpdateRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blackLastUpdatedNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInnerCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitChangeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmChangeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devVerifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCheckInnerCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableDevVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCheckInnerCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDevVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlacksFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlacksTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuleByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuleByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rulesLastUpdatedNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rulesLen", data: BytesLike): Result;

  events: {
    "AdminChanged(address)": EventFragment;
    "AdminChanging(address)": EventFragment;
    "BlackAddrAdded(address,uint8)": EventFragment;
    "BlackAddrRemoved(address,uint8)": EventFragment;
    "CheckInnerCreationStateChanged(bool)": EventFragment;
    "DeveloperAdded(address)": EventFragment;
    "DeveloperRemoved(address)": EventFragment;
    "EnableStateChanged(bool)": EventFragment;
    "RuleAdded(bytes32,uint128,uint8)": EventFragment;
    "RuleRemoved(bytes32,uint128,uint8)": EventFragment;
    "RuleUpdated(bytes32,uint128,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanging"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlackAddrAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlackAddrRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CheckInnerCreationStateChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeveloperAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeveloperRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleUpdated"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<[string] & { newAdmin: string }>;

export type AdminChangingEvent = TypedEvent<[string] & { newAdmin: string }>;

export type BlackAddrAddedEvent = TypedEvent<
  [string, number] & { addr: string; d: number }
>;

export type BlackAddrRemovedEvent = TypedEvent<
  [string, number] & { addr: string; d: number }
>;

export type CheckInnerCreationStateChangedEvent = TypedEvent<
  [boolean] & { newState: boolean }
>;

export type DeveloperAddedEvent = TypedEvent<[string] & { addr: string }>;

export type DeveloperRemovedEvent = TypedEvent<[string] & { addr: string }>;

export type EnableStateChangedEvent = TypedEvent<
  [boolean] & { newState: boolean }
>;

export type RuleAddedEvent = TypedEvent<
  [string, BigNumber, number] & {
    eventSig: string;
    checkIdx: BigNumber;
    t: number;
  }
>;

export type RuleRemovedEvent = TypedEvent<
  [string, BigNumber, number] & {
    eventSig: string;
    checkIdx: BigNumber;
    t: number;
  }
>;

export type RuleUpdatedEvent = TypedEvent<
  [string, BigNumber, number] & {
    eventSig: string;
    checkIdx: BigNumber;
    t: number;
  }
>;

export class AddressList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AddressListInterface;

  functions: {
    addBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDeveloper(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOrUpdateRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      tp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    blackLastUpdatedNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkInnerCreation(overrides?: CallOverrides): Promise<[boolean]>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmChangeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devVerifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    disableCheckInnerCreation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableDevVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableCheckInnerCreation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableDevVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlacksFrom(overrides?: CallOverrides): Promise<[string[]]>;

    getBlacksTo(overrides?: CallOverrides): Promise<[string[]]>;

    getRuleByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, number]>;

    getRuleByKey(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, number]>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isBlackAddress(
      a: string,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    isDeveloper(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    removeBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDeveloper(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rulesLastUpdatedNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    rulesLen(overrides?: CallOverrides): Promise<[number]>;
  };

  addBlacklist(
    a: string,
    d: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDeveloper(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOrUpdateRule(
    sig: BytesLike,
    checkIdx: BigNumberish,
    tp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  blackLastUpdatedNumber(overrides?: CallOverrides): Promise<BigNumber>;

  checkInnerCreation(overrides?: CallOverrides): Promise<boolean>;

  commitChangeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmChangeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devVerifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  disableCheckInnerCreation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableDevVerify(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableCheckInnerCreation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableDevVerify(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlacksFrom(overrides?: CallOverrides): Promise<string[]>;

  getBlacksTo(overrides?: CallOverrides): Promise<string[]>;

  getRuleByIndex(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, number]>;

  getRuleByKey(
    sig: BytesLike,
    checkIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, number]>;

  initialize(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isBlackAddress(
    a: string,
    overrides?: CallOverrides
  ): Promise<[boolean, number]>;

  isDeveloper(addr: string, overrides?: CallOverrides): Promise<boolean>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  removeBlacklist(
    a: string,
    d: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDeveloper(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRule(
    sig: BytesLike,
    checkIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rulesLastUpdatedNumber(overrides?: CallOverrides): Promise<BigNumber>;

  rulesLen(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    addBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDeveloper(addr: string, overrides?: CallOverrides): Promise<void>;

    addOrUpdateRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      tp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    blackLastUpdatedNumber(overrides?: CallOverrides): Promise<BigNumber>;

    checkInnerCreation(overrides?: CallOverrides): Promise<boolean>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmChangeAdmin(overrides?: CallOverrides): Promise<void>;

    devVerifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    disableCheckInnerCreation(overrides?: CallOverrides): Promise<void>;

    disableDevVerify(overrides?: CallOverrides): Promise<void>;

    enableCheckInnerCreation(overrides?: CallOverrides): Promise<void>;

    enableDevVerify(overrides?: CallOverrides): Promise<void>;

    getBlacksFrom(overrides?: CallOverrides): Promise<string[]>;

    getBlacksTo(overrides?: CallOverrides): Promise<string[]>;

    getRuleByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, number]>;

    getRuleByKey(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, number]>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isBlackAddress(
      a: string,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    isDeveloper(addr: string, overrides?: CallOverrides): Promise<boolean>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    removeBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDeveloper(addr: string, overrides?: CallOverrides): Promise<void>;

    removeRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rulesLastUpdatedNumber(overrides?: CallOverrides): Promise<BigNumber>;

    rulesLen(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AdminChanged(address)"(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    AdminChanged(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    "AdminChanging(address)"(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    AdminChanging(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    "BlackAddrAdded(address,uint8)"(
      addr?: string | null,
      d?: null
    ): TypedEventFilter<[string, number], { addr: string; d: number }>;

    BlackAddrAdded(
      addr?: string | null,
      d?: null
    ): TypedEventFilter<[string, number], { addr: string; d: number }>;

    "BlackAddrRemoved(address,uint8)"(
      addr?: string | null,
      d?: null
    ): TypedEventFilter<[string, number], { addr: string; d: number }>;

    BlackAddrRemoved(
      addr?: string | null,
      d?: null
    ): TypedEventFilter<[string, number], { addr: string; d: number }>;

    "CheckInnerCreationStateChanged(bool)"(
      newState?: boolean | null
    ): TypedEventFilter<[boolean], { newState: boolean }>;

    CheckInnerCreationStateChanged(
      newState?: boolean | null
    ): TypedEventFilter<[boolean], { newState: boolean }>;

    "DeveloperAdded(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    DeveloperAdded(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "DeveloperRemoved(address)"(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    DeveloperRemoved(
      addr?: string | null
    ): TypedEventFilter<[string], { addr: string }>;

    "EnableStateChanged(bool)"(
      newState?: boolean | null
    ): TypedEventFilter<[boolean], { newState: boolean }>;

    EnableStateChanged(
      newState?: boolean | null
    ): TypedEventFilter<[boolean], { newState: boolean }>;

    "RuleAdded(bytes32,uint128,uint8)"(
      eventSig?: BytesLike | null,
      checkIdx?: null,
      t?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { eventSig: string; checkIdx: BigNumber; t: number }
    >;

    RuleAdded(
      eventSig?: BytesLike | null,
      checkIdx?: null,
      t?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { eventSig: string; checkIdx: BigNumber; t: number }
    >;

    "RuleRemoved(bytes32,uint128,uint8)"(
      eventSig?: BytesLike | null,
      checkIdx?: null,
      t?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { eventSig: string; checkIdx: BigNumber; t: number }
    >;

    RuleRemoved(
      eventSig?: BytesLike | null,
      checkIdx?: null,
      t?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { eventSig: string; checkIdx: BigNumber; t: number }
    >;

    "RuleUpdated(bytes32,uint128,uint8)"(
      eventSig?: BytesLike | null,
      checkIdx?: null,
      t?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { eventSig: string; checkIdx: BigNumber; t: number }
    >;

    RuleUpdated(
      eventSig?: BytesLike | null,
      checkIdx?: null,
      t?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { eventSig: string; checkIdx: BigNumber; t: number }
    >;
  };

  estimateGas: {
    addBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDeveloper(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOrUpdateRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      tp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    blackLastUpdatedNumber(overrides?: CallOverrides): Promise<BigNumber>;

    checkInnerCreation(overrides?: CallOverrides): Promise<BigNumber>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmChangeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devVerifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    disableCheckInnerCreation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableDevVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableCheckInnerCreation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableDevVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlacksFrom(overrides?: CallOverrides): Promise<BigNumber>;

    getBlacksTo(overrides?: CallOverrides): Promise<BigNumber>;

    getRuleByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRuleByKey(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isBlackAddress(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDeveloper(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    removeBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDeveloper(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rulesLastUpdatedNumber(overrides?: CallOverrides): Promise<BigNumber>;

    rulesLen(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDeveloper(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOrUpdateRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      tp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackLastUpdatedNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkInnerCreation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmChangeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devVerifyEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableCheckInnerCreation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableDevVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableCheckInnerCreation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableDevVerify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlacksFrom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlacksTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRuleByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRuleByKey(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlackAddress(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeveloper(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBlacklist(
      a: string,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDeveloper(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRule(
      sig: BytesLike,
      checkIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rulesLastUpdatedNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rulesLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
