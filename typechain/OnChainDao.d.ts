/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OnChainDaoInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "commitChangeAdmin(address)": FunctionFragment;
    "commitProposal(uint256,address,address,uint256,bytes)": FunctionFragment;
    "confirmChangeAdmin()": FunctionFragment;
    "finishProposalById(uint256)": FunctionFragment;
    "getPassedProposalByIndex(uint32)": FunctionFragment;
    "getPassedProposalCount()": FunctionFragment;
    "getProposalById(uint256)": FunctionFragment;
    "getProposalsTotalCount()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitChangeAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitProposal",
    values: [BigNumberish, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmChangeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishProposalById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPassedProposalByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPassedProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsTotalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitChangeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmChangeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishProposalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPassedProposalByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPassedProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsTotalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address)": EventFragment;
    "AdminChanging(address)": EventFragment;
    "ProposalCommitted(uint256)": EventFragment;
    "ProposalFinished(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanging"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFinished"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<[string] & { newAdmin: string }>;

export type AdminChangingEvent = TypedEvent<[string] & { newAdmin: string }>;

export type ProposalCommittedEvent = TypedEvent<
  [BigNumber] & { id: BigNumber }
>;

export type ProposalFinishedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export class OnChainDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OnChainDaoInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitProposal(
      action: BigNumberish,
      from: string,
      to: string,
      value: BigNumberish,
      input: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmChangeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishProposalById(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPassedProposalByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        action: BigNumber;
        from: string;
        to: string;
        value: BigNumber;
        data: string;
      }
    >;

    getPassedProposalCount(overrides?: CallOverrides): Promise<[number]>;

    getProposalById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, string] & {
        _id: BigNumber;
        action: BigNumber;
        from: string;
        to: string;
        value: BigNumber;
        data: string;
      }
    >;

    getProposalsTotalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  commitChangeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitProposal(
    action: BigNumberish,
    from: string,
    to: string,
    value: BigNumberish,
    input: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmChangeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishProposalById(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPassedProposalByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, string] & {
      id: BigNumber;
      action: BigNumber;
      from: string;
      to: string;
      value: BigNumber;
      data: string;
    }
  >;

  getPassedProposalCount(overrides?: CallOverrides): Promise<number>;

  getProposalById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, string] & {
      _id: BigNumber;
      action: BigNumber;
      from: string;
      to: string;
      value: BigNumber;
      data: string;
    }
  >;

  getProposalsTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commitProposal(
      action: BigNumberish,
      from: string,
      to: string,
      value: BigNumberish,
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmChangeAdmin(overrides?: CallOverrides): Promise<void>;

    finishProposalById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPassedProposalByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        action: BigNumber;
        from: string;
        to: string;
        value: BigNumber;
        data: string;
      }
    >;

    getPassedProposalCount(overrides?: CallOverrides): Promise<number>;

    getProposalById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, string] & {
        _id: BigNumber;
        action: BigNumber;
        from: string;
        to: string;
        value: BigNumber;
        data: string;
      }
    >;

    getProposalsTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address)"(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    AdminChanged(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    "AdminChanging(address)"(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    AdminChanging(
      newAdmin?: string | null
    ): TypedEventFilter<[string], { newAdmin: string }>;

    "ProposalCommitted(uint256)"(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    ProposalCommitted(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "ProposalFinished(uint256)"(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    ProposalFinished(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitProposal(
      action: BigNumberish,
      from: string,
      to: string,
      value: BigNumberish,
      input: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmChangeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishProposalById(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPassedProposalByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPassedProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalsTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitChangeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitProposal(
      action: BigNumberish,
      from: string,
      to: string,
      value: BigNumberish,
      input: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmChangeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishProposalById(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPassedProposalByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPassedProposalCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalsTotalCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
